name: Django CI

on:
  push:
    branches: [ "feature2" ]
  pull_request:
    branches: [ "feature2" ]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Run flake8
        run: flake8 .

  tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: python manage.py test
        env:
          SECRET_KEY: test_secret_key

  deploy:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy .env to server
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          scp -o StrictHostKeyChecking=no .env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/path/to/project/.env

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          cd /path/to/project
          git fetch origin
          git reset --hard origin/feature2
          docker compose down
          docker compose up -d --build
          EOF


#  build:
#    needs: tests
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.12'
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install -r requirements.txt
#
#      # Создаем пустую папку, если её нет в репозитории
#      - name: Ensure static directory exists
#        run: mkdir -p ./static
#
#      # Для отладки: проверяем содержимое
#      - name: Debug static files
#        run: ls -la ./static
#
#      - name: Prepare static directories
#        run: |
#          # Создаем обе папки с правильными правами
#          mkdir -p ./static ./staticfiles
#          chmod 755 ./static ./staticfiles
#
#          # Для отладки: проверяем структуру
#          ls -la
#          tree -L 3 || echo "Tree not installed"
#
#      - name: Collect static files
#        run: python manage.py collectstatic --noinput --verbosity 3
#        env:
#          SECRET_KEY: ${{secrets.SECRET_KEY}}
#          DJANGO_SETTINGS_MODULE: "config.settings"
#
#      - name: Login to Docker Hub
#        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
#
#      - name: Build and push
#        run: |
#          echo "${{ secrets.SECRET_KEY }}" > secret_key.txt
#          docker build --secret id=SECRET_KEY,src=secret_key.txt -t ${{ secrets.DOCKER_USERNAME }}/drf_project:${{ github.sha }} .
#          rm secret_key.txt
#          docker push ${{ secrets.DOCKER_USERNAME }}/drf_project:${{ github.sha }}

#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - name: Set up SSH
#        uses: webfactory/ssh-agent@v0.9.0
#        with:
#          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
#
#      # Создаём .env заново
#      - name: Create .env file
#        run: |
#          echo "${{ secrets.ENV_FILE }}" > .env
#
#      # Копируем на сервер
#      - name: Copy .env to server
#        run: |
#          scp -o StrictHostKeyChecking=no .env ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:/tmp/drf_project.env
#
#
#      - name: Deploy to server
#        run: |
#          ssh ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << "EOF"
#          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
#          docker pull ${{ secrets.DOCKER_USERNAME }}/drf_project:${{ github.sha }} || {
#            echo "ERROR: Failed to pull image"
#            exit 1
#          }
#          docker stop drf_project || true
#          docker rm drf_project || true
#          docker system prune -a --volumes --force
#          docker run -d \
#            --name drf_project \
#            --env-file /tmp/drf_project.env \
#            -p 80:8000 \
#            ${{ secrets.DOCKER_USERNAME }}/drf_project:${{ github.sha }}
#          EOF